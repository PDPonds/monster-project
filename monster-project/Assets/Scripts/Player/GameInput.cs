//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""action"",
            ""id"": ""828246df-17b1-47be-b446-0cc708c65b35"",
            ""actions"": [
                {
                    ""name"": ""PlayerMoveInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5c6343f5-1264-45c1-b563-1fe99a585250"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""9cac3eea-a1dc-4120-b005-1cc09f434900"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""36ede9aa-cd9f-4686-917c-b4eeb79f5686"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""Button"",
                    ""id"": ""76d692ad-8c3a-4d6a-bb04-bab25b52c8d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateOnSelect"",
                    ""type"": ""Button"",
                    ""id"": ""cc85d89a-0129-4abd-bbba-226046b13efa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9e35a0c7-7074-4a04-a91d-4f9f96f73da7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""819f5270-5365-4351-8842-9b74394f17b8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""052f81a1-3771-4939-96ee-7fa7827184db"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c71b748-3072-4e22-ad57-d6f8fffcc4c6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b2bd872a-8dac-4efb-9135-ad920e2c8c96"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f9c1a76-4535-47ea-88e0-461ac216b1a5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08f7344a-25e0-4978-94c0-f0b425d9ff30"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e483a88b-e97c-445f-b800-4a0eedb06561"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d678565-7b9a-404e-a333-a90ef0589463"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39dcf5ce-2099-4f5f-b2cb-2741a8f43565"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateOnSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df49a6c8-aec9-4395-9733-f031743ec1e2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // action
        m_action = asset.FindActionMap("action", throwIfNotFound: true);
        m_action_PlayerMoveInput = m_action.FindAction("PlayerMoveInput", throwIfNotFound: true);
        m_action_MousePos = m_action.FindAction("MousePos", throwIfNotFound: true);
        m_action_Aim = m_action.FindAction("Aim", throwIfNotFound: true);
        m_action_ToggleInventory = m_action.FindAction("ToggleInventory", throwIfNotFound: true);
        m_action_RotateOnSelect = m_action.FindAction("RotateOnSelect", throwIfNotFound: true);
        m_action_Interact = m_action.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // action
    private readonly InputActionMap m_action;
    private List<IActionActions> m_ActionActionsCallbackInterfaces = new List<IActionActions>();
    private readonly InputAction m_action_PlayerMoveInput;
    private readonly InputAction m_action_MousePos;
    private readonly InputAction m_action_Aim;
    private readonly InputAction m_action_ToggleInventory;
    private readonly InputAction m_action_RotateOnSelect;
    private readonly InputAction m_action_Interact;
    public struct ActionActions
    {
        private @GameInput m_Wrapper;
        public ActionActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMoveInput => m_Wrapper.m_action_PlayerMoveInput;
        public InputAction @MousePos => m_Wrapper.m_action_MousePos;
        public InputAction @Aim => m_Wrapper.m_action_Aim;
        public InputAction @ToggleInventory => m_Wrapper.m_action_ToggleInventory;
        public InputAction @RotateOnSelect => m_Wrapper.m_action_RotateOnSelect;
        public InputAction @Interact => m_Wrapper.m_action_Interact;
        public InputActionMap Get() { return m_Wrapper.m_action; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionActions set) { return set.Get(); }
        public void AddCallbacks(IActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionActionsCallbackInterfaces.Add(instance);
            @PlayerMoveInput.started += instance.OnPlayerMoveInput;
            @PlayerMoveInput.performed += instance.OnPlayerMoveInput;
            @PlayerMoveInput.canceled += instance.OnPlayerMoveInput;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @ToggleInventory.started += instance.OnToggleInventory;
            @ToggleInventory.performed += instance.OnToggleInventory;
            @ToggleInventory.canceled += instance.OnToggleInventory;
            @RotateOnSelect.started += instance.OnRotateOnSelect;
            @RotateOnSelect.performed += instance.OnRotateOnSelect;
            @RotateOnSelect.canceled += instance.OnRotateOnSelect;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IActionActions instance)
        {
            @PlayerMoveInput.started -= instance.OnPlayerMoveInput;
            @PlayerMoveInput.performed -= instance.OnPlayerMoveInput;
            @PlayerMoveInput.canceled -= instance.OnPlayerMoveInput;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @ToggleInventory.started -= instance.OnToggleInventory;
            @ToggleInventory.performed -= instance.OnToggleInventory;
            @ToggleInventory.canceled -= instance.OnToggleInventory;
            @RotateOnSelect.started -= instance.OnRotateOnSelect;
            @RotateOnSelect.performed -= instance.OnRotateOnSelect;
            @RotateOnSelect.canceled -= instance.OnRotateOnSelect;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IActionActions instance)
        {
            if (m_Wrapper.m_ActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionActions @action => new ActionActions(this);
    public interface IActionActions
    {
        void OnPlayerMoveInput(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnToggleInventory(InputAction.CallbackContext context);
        void OnRotateOnSelect(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
